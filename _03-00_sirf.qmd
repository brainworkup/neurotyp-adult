# SUMMARY/IMPRESSION {#sec-sirf}

```{r}
#| label: make-g
#| include: false
#| eval: false

scales <- c(
  "Academic Skills",
  "Attention",
  "Attention Span",
  "Attention/Executive",
  "Attentional Fluency",
  "Cognitive Efficiency",
  "Cognitive Proficiency",
  "Crystallized Knowledge",
  "Delayed Recall",
  "Executive Functions",
  "Global Neurocognitive Index (G)",
  "Verbal Fluency",
  "Fluid Reasoning",
  "General Ability",
  "Learning Efficiency",
  "Memory",
  "Planning",
  "Processing Speed",
  "Psychomotor Speed",
  "Verbal/Language",
  "Visual Perception/Construction",
  "Working Memory",
  "Reading",
  "Math",
  "Writing",
  "Academic Fluency"
)

# make g
g <-
  readxl::read_excel("data/index_scores.xlsx") |>
  janitor::clean_names() |>
  dplyr::mutate(z = (index - 100) / 15) |>
  dplyr::filter(composite_name %in% scales) |>
  dplyr::rename(
    scale = composite_name,
    score = index,
    ci_95 = x95_percent_ci
  ) |>
  dplyr::mutate(
    test = "index_score",
    test_name = "Composite Scores",
    domain = "General Cognitive Ability",
    subdomain = scale,
    test_type = "npsych_test"
  ) |>
  bwu::gpluck_make_score_ranges(range = "", test_type = "npsych_test") |>
  dplyr::select(
    scale,
    score,
    ci_95,
    z,
    percentile,
    range,
    test,
    test_name,
    domain,
    subdomain,
    test_type,
    reliability,
    composition
  )

# save g.csv
readr::write_csv(g, "data/csv/g.csv")
```

```{r}
#| label: fig-sirf
#| include: false
#| eval: true
#| fig-cap: "Overall neurocognitive function subdomain plots of the patient's strengths and weaknesses. _Note:_ _z_-Scores have a mean of 0 and a standard deviation of 1."

g <- vroom::vroom("data/csv/g.csv")

# scales
keep <- c(
  "General Ability",
  "Academic Skills",
  "Fluid Reasoning",
  # "Attention/Executive",
  "Attention",
  "Attention Span",
  "Attentional Fluency",
  "Cognitive Efficiency",
  # "Cognitive Proficiency",
  "Crystallized Knowledge",
  "Executive Functions",
  # "Global Neurocognitive Index (G)",
  "Verbal Fluency",
  "Delayed Recall",
  "Learning Efficiency",
  # "Memory",
  "Planning",
  # "Processing Speed",
  "Psychomotor Speed",
  "Verbal/Language",
  "Visual Perception/Construction",
  "Working Memory",
  "Reading",
  "Math",
  "Writing",
  "Academic Fluency"
)

g <- dplyr::filter(g, scale %in% keep)
g <- g[complete.cases(g$z), ]

pheno <- "g"
data <- g
x <- g$z
y <- g$scale
colors <- NULL
return_plot <- Sys.getenv("RETURN_PLOT")
filename <- "fig_g.svg"

bwu::dotplot(
  data = g,
  x = x,
  y = y,
  colors = colors,
  return_plot = return_plot,
  filename = filename
)
```

```{r}
#| label: fig-domains
#| include: false
#| eval: true
#| fig-cap: "Broad cognitive domains"

# args
data <- vroom::vroom("neurocog.csv")
data2 <- dplyr::filter(data, scale != "Cognitive Proficiency")

data2 <-
  data2 |>
  dplyr::group_by(domain, .add = TRUE) |>
  dplyr::mutate(z_mean_domain = mean(z), z_sd_domain = sd(z)) |>
  dplyr::ungroup()

x2 <- data2$z_mean_domain
y2 <- data2$domain
colors <- NULL
return_plot <- Sys.getenv("RETURN_PLOT")
filename <- "fig_domains.svg"

# Make dotplot
bwu::dotplot(
  data = data2,
  x = x2,
  y = y2,
  colors = colors,
  return_plot = return_plot,
  filename = filename
)
```

```{=typst}
#let domain(file_fig) = {
  let font = (font: "Roboto Slab", size: 0.5em)
  set text(..font)
  figure(
    [#image(file_fig, width: 85%)],
    placement: none,
    caption: figure.caption(
      position: bottom,
      [Overall neurocognitive function subdomain plots of the patient's strengths and
        weaknesses. _Note:_ _z_-scores have a mean of 0 and a standard deviation of 1.],
    ),
    kind: "image",
    supplement: [Figure],
    gap: 0.5em,
  )
}
```

```{=typst}
#let file_fig = "fig_g.svg"
#domain(file_fig)
```

```{=typst}
#let file_fig = "fig_domains.svg"
#domain(file_fig)
```
