## Behavioral/Emotional/Social {#sec-emotion}

```{r}
#| label: setup-emotion
#| include: false

# Suppress warnings from being converted to errors
options(warn = 1) # Set warn to 1 to make warnings not halt execution

# domain
domains <- c("Behavioral/Emotional/Social")

# target phenotype
pheno <- "emotion"
```

```{r}
#| label: export-emotion
#| include: false

# Read the CSV file into a data frame
emotion <- vroom::vroom("neurobehav.csv")

# Filter the data frame based on certain conditions
# Keep only the rows where 'domain' equals 'domains' and 'z_mean_domain' is not NA
emotion <- emotion |>
  dplyr::filter(domain %in% domains)

# Select specific columns from the data frame
emotion <- emotion |>
  dplyr::select(
    test,
    test_name,
    scale,
    raw_score,
    score,
    ci_95,
    percentile,
    range,
    domain,
    subdomain,
    narrow,
    pass,
    verbal,
    timed,
    result,
    z,
    z_mean_domain,
    z_sd_domain,
    z_mean_subdomain,
    z_sd_subdomain,
    z_mean_narrow,
    z_sd_narrow
  )

# Write the 'emotion' data frame to a CSV file
# The file name is derived from the 'pheno' variable
readr::write_excel_csv(emotion, here::here("data", paste0(pheno, ".csv")), na = "", col_names = TRUE, append = FALSE)
```

```{r}
#| label: data-emotion
#| include: false

# read and filter data
data <- emotion

# scales in this domain
scales <- c(
  # PAI
  "Activity Level",
  "Affective (A)",
  "Affective (D)",
  "Affective Instability",
  "Aggression",
  "Aggressive Attitude",
  "ALC Estimated Score",
  "Alcohol Problems",
  "Antisocial Behaviors",
  "Antisocial Features",
  "Anxiety-Related Disorders",
  "Anxiety",
  "Borderline Features",
  "Cognitive (A)",
  "Cognitive (D)",
  "Conversion",
  "Depression",
  "Dominance",
  "DRG Estimated Score",
  "Drug Problems",
  "Egocentricity",
  "Grandiosity",
  "Health Concerns",
  "Hypervigilance",
  "Identity Problems",
  "Irritability",
  "Mania",
  "Negative Relationships",
  "Nonsupport",
  "Obsessive-Compulsive",
  "Paranoia",
  "Persecution",
  "Phobias",
  "Physical Aggression",
  "Physiological (A)",
  "Physiological (D)",
  "Psychotic Experiences",
  "Resentment",
  "Schizophrenia",
  "Self-Harm",
  "Social Detachment",
  "Somatic Complaints",
  "Somatization",
  "Stimulus-Seeking",
  "Stress",
  "Suicidal Ideation",
  "Thought Disorder",
  "Traumatic Stress",
  "Treatment Rejection",
  "Verbal Aggression",
  "Warmth",
  # Beck
  "BAI Total Score",
  "BDI-2 Total Score",
  # BASC-3
  "Activities of Daily Living",
  "Adaptability",
  "Adaptive Skills",
  "Aggression",
  "Anxiety",
  "Attention Problems",
  "Attitude to School",
  "Attitude to Teachers",
  "Atypicality",
  "Behavioral Symptoms Index",
  "Conduct Problems",
  "Depression",
  "Emotional Symptoms Index",
  "Externalizing Problems",
  "Functional Communication",
  "Hyperactivity",
  "Inattention/Hyperactivity",
  "Internalizing Problems",
  "Interpersonal Relations",
  "Leadership",
  "Locus of Control",
  "Personal Adjustment",
  "Relations with Parents",
  "School Problems",
  "Self-Esteem",
  "Self-Reliance",
  "Sensation Seeking",
  "Sense of Inadequacy",
  "Social Skills",
  "Social Stress",
  "Somatization",
  "Withdrawal"
)

# Filter the data using the filter_data function from the bwu library
# The domain is specified by the 'domains' variable
# The scale is specified by the 'scales' variable
data_emotion <-
  bwu::filter_data(
    data,
    domain = domains,
    scale = scales
  )
```

```{r}
#| label: text-emotion-child
#| cache: true
#| include: false
#| eval: true

# Self-report
data_emotion_self <-
  data_emotion |>
  dplyr::filter(test == "basc3_srp_child" | test == "basc3_srp_adolescent" | test == "basc3_srp_college" | test == "pai_adolescent") |>
  dplyr::arrange(dplyr::desc(percentile)) |>
  dplyr::distinct(.keep_all = FALSE)

# Flatten the text
bwu::cat_neuropsych_results(data = data_emotion_self, file = "_02-10_emotion_child_text_self.qmd")
```

```{r}
#| label: text-emotion-parent
#| cache: true
#| include: false
#| eval: true

# Parent report
data_emotion_parent <-
  data_emotion |>
  dplyr::filter(test == "basc3_prs_preschool" | test == "basc3_prs_child" | test == "basc3_prs_adolescent" | test == "basc3_prs_college") |>
  dplyr::arrange(dplyr::desc(percentile)) |>
  dplyr::distinct(.keep_all = FALSE)

# Flatten the text
bwu::cat_neuropsych_results(data = data_emotion_parent, file = "_02-09_emotion_child_text_parent.qmd")
```

```{r}
#| label: text-emotion-teacher
#| cache: true
#| include: false
#| eval: false

# Teacher report
data_emotion_teacher <-
  data_emotion |>
  dplyr::filter(test == "basc3_trs_preschool" | test == "basc3_trs_child" | test == "basc3_trs_adolescent" | test == "basc3_trs_college") |>
  dplyr::arrange(dplyr::desc(percentile)) |>
  dplyr::distinct(.keep_all = FALSE)

# Flatten the text
bwu::cat_neuropsych_results(data = data_emotion_teacher, file = "_02-09_emotion_child_text_teacher.qmd")
```

```{r}
#| label: qtbl-emotion-child
#| dev: tikz
#| fig-process: pdf2png
#| include: false
#| eval: false
options(tikzDefaultEngine = "xetex")

# table arguments
table_name <- "table_emotion_self"
vertical_padding <- 0
multiline <- TRUE

# source note
source_note <- gt::md("_T_-score: Mean = 50 [50th‰], SD ± 10 [16th‰, 84th‰].

_Note_: Personal Adjustment scores are reversed.")

# footnotes
fn_t_score <- gt::md("T-score: Mean = 50 [50th‰], SD ± 10 [16th‰, 84th‰]")

# define the groupings for the table
grp_emotion <- list(
  t_score = c("BASC-3 SRP Adolescent", "BASC-3 TRS Adolescent", "BASC-3 PRS Adolescent", "PAI", "MMPI-3")
)

grp_self <- list(
  t_score = c("BASC-3 SRP Adolescent", "PAI", "MMPI-3")
)

# redo this bc got sorted by pct
data_emotion_self <-
  data_emotion |>
  dplyr::filter(test == "basc3_srp_child" | test == "basc3_srp_adolescent" | test == "basc3_srp_college") |>
  dplyr::distinct(.keep_all = FALSE)

# make `gt` table
bwu::tbl_gt(
  data = data_emotion_self,
  pheno = pheno,
  table_name = table_name,
  source_note = source_note,
  fn_t_score = fn_t_score,
  grp_t_score = grp_self[["t_score"]],
  dynamic_grp = grp_self,
  vertical_padding = vertical_padding,
  multiline = multiline
)
```

```{r}
#| label: qtbl-emotion-parent
#| dev: tikz
#| fig-process: pdf2png
#| include: false
#| eval: true
options(tikzDefaultEngine = "xetex")

# table arguments
table_name <- "table_emotion_parent"
vertical_padding <- 0
multiline <- TRUE

# source note
source_note <- gt::md("_T_-score: Mean = 50 [50th‰], SD ± 10 [16th‰, 84th‰].

_Note_: Adaptive Skills scores are reversed.")

# footnotes
fn_t_score <- gt::md("T-score: Mean = 50 [50th‰], SD ± 10 [16th‰, 84th‰]")

grp_emotion <- list(
  t_score = c("BASC-3 SRP Adolescent", "BASC-3 TRS Adolescent", "BASC-3 PRS Adolescent", "PAI", "MMPI-3", "BASC-3 PRS", "BASC-3 PRS")
)

grp_parent <- list(
  t_score = c("BASC-3 PRS")
)

# redo this bc got sorted by pct
data_emotion_parent <-
  data_emotion |>
  dplyr::filter(
    test == "basc3_prs_preschool" |
      test == "basc3_prs_child" |
      test == "basc3_prs_adolescent" |
      test == "basc3_prs_college"
  ) |>
  dplyr::distinct(.keep_all = FALSE)

pheno <- "emotion_parent"

# make `gt` table
bwu::tbl_gt(
  data = data_emotion_parent,
  pheno = pheno,
  table_name = table_name,
  source_note = source_note,
  # fn_t_score = fn_t_score,
  # grp_t_score = grp_parent[["t_score"]],
  dynamic_grp = grp_parent,
  vertical_padding = vertical_padding,
  multiline = multiline
)
```

```{r}
#| label: qtbl-emotion-teacher
#| dev: tikz
#| fig-process: pdf2png
#| include: false
#| eval: false
options(tikzDefaultEngine = "xetex")

# table arguments
table_name <- "table_emotion_teacher"
vertical_padding <- 0
multiline <- TRUE

# source note
source_note <- gt::md("_T_-score: Mean = 50 [50th‰], SD ± 10 [16th‰, 84th‰].

_Note_: Personal Adjustment scores are reversed.")

# footnotes
fn_t_score <- gt::md("T-score: Mean = 50 [50th‰], SD ± 10 [16th‰, 84th‰]")

# define the groupings for the table
grp_emotion <- list(
  t_score = c("BASC-3 SRP", "BASC-3 TRS", "BASC-3 PRS", "PAI", "MMPI-3")
)

grp_teacher <- list(
  t_score = c("BASC-3 TRS")
)

# Clean scale names
data_emotion_teacher <-
  dplyr::mutate(data_emotion_teacher,
    scale = stringr::str_remove_all(
      scale, "PAI |BASC-3 |MMPI-3 "
    )
  )

# redo this bc got sorted by pct
data_emotion_teacher <-
  data_emotion |>
  dplyr::filter(test == "basc3_trs_preschool", test == "basc3_trs_child" | test == "basc3_trs_adolescent" | test == "basc3_trs_college") |>
  dplyr::distinct(.keep_all = FALSE)

# make `gt` table
bwu::tbl_gt(
  data = data_emotion_teacher,
  pheno = pheno,
  table_name = table_name,
  source_note = source_note,
  # fn_t_score = fn_t_score,
  # grp_t_score = grp_teacher[["t_score"]],
  dynamic_grp = grp_teacher,
  vertical_padding = vertical_padding,
  multiline = multiline
)
```

```{r}
#| label: fig-emotion-child
#| include: false
#| fig-cap: "Mood/Child Self-Report"
#| eval: false

# df child
df_child <-
  dplyr::filter(data) |>
  dplyr::filter(test == "basc3_srp_child" | test == "basc3_srp_adolescent" | test == "basc3_srp_college" | test == "pai_adolescent")

# `bwu` dotplot arguments
colors <- NULL
return_plot <- Sys.getenv("RETURN_PLOT")
filename <- "fig_emotion_child.svg"

# variables to plot
x <- df_child$z_mean_subdomain
y <- df_child$subdomain

# Suppress warnings from being converted to errors
options(warn = 1) # Set warn to 1 to make warnings not halt execution

# make dotplot
bwu::dotplot(
  data = df_child,
  x = x,
  y = y,
  colors = colors,
  return_plot = return_plot,
  filename = filename,
  na.rm = TRUE
)

# Reset warning options to default if needed
options(warn = 0) # Reset to default behavior
```

```{r}
#| label: fig-emotion-parent
#| include: false
#| fig-cap: "Mood/Parent-Report"
#| eval: true

# df parent
df_parent <-
  dplyr::filter(data) |>
  dplyr::filter(test == "basc3_prs_parent" | test == "basc3_prs_adolescent" | test == "basc3_prs_college")

# Dotplot arguments
filename <- "fig_emotion_parent.svg"
colors <- NULL
return_plot <- Sys.getenv("RETURN_PLOT")

# variables to plot
x <- df_parent$z_mean_subdomain
y <- df_parent$subdomain

# Suppress warnings from being converted to errors
options(warn = 1) # Set warn to 1 to make warnings not halt execution

pheno <- "emotion_parent"

# Make dotplot
bwu::dotplot(
  data = df_parent,
  x = x,
  y = y,
  colors = colors,
  return_plot = return_plot,
  filename = filename,
  na.rm = TRUE
)

# Reset warning options to default if needed
options(warn = 0) # Reset to default behavior
```

```{r}
#| label: fig-emotion-teacher
#| include: false
#| fig-cap: "Mood/Teacher Report"
#| eval: false

# df teacher
df_teacher <-
  dplyr::filter(data) |>
  dplyr::filter(test_name == "BASC-3 TRS ")

# Dotplot arguments
colors <- NULL
return_plot <- Sys.getenv("RETURN_PLOT")
filename <- "fig_emotion_teacher.svg"

# variables to plot
x <- df_teacher$z_mean_subdomain
y <- df_teacher$subdomain

# Suppress warnings from being converted to errors
options(warn = 1) # Set warn to 1 to make warnings not halt execution

# Make dotplot
bwu::dotplot(
  data = df_teacher,
  x = x,
  y = y,
  colors = colors,
  return_plot = return_plot,
  filename = filename,
  na.rm = TRUE
)

# Reset warning options to default if needed
options(warn = 0) # Reset to default behavior
```

```{r}
#| label: fig-emotion-child-scale
#| include: false
#| fig-cap: "Mood/Self-Report"
#| eval: false

# arguments
filename <- "fig_emotion_child_scale.svg"
x <- df_child$z
y <- df_child$scale

# Suppress warnings from being converted to errors
options(warn = 1) # Set warn to 1 to make warnings not halt execution

# Make dotplot
bwu::dotplot(
  data = df_child,
  x = x,
  y = y,
  colors = colors,
  return_plot = return_plot,
  filename = filename,
  na.rm = TRUE
)

# Reset warning options to default if needed
options(warn = 0) # Reset to default behavior
```

```{r}
#| label: fig-emotion-parent-scale
#| include: false
#| fig-cap: "Mood/Parent Report"
#| eval: false

# arguments
filename <- "fig_emotion_parent_scale.svg"
x <- df_parent$z
y <- df_parent$scale

# Suppress warnings from being converted to errors
options(warn = 1) # Set warn to 1 to make warnings not halt execution

# Make dotplot
bwu::dotplot(
  data = df_parent,
  x = x,
  y = y,
  colors = colors,
  return_plot = return_plot,
  filename = filename,
  na.rm = TRUE
)

# Reset warning options to default if needed
options(warn = 0) # Reset to default behavior
```

```{r}
#| label: fig-emotion-teacher-scale
#| include: false
#| fig-cap: "Mood/Teacher Report"
#| eval: false

# Better version, uses scales to get all the composites
x <- df_teacher$z
y <- df_teacher$scale
filename <- "fig_emotion_teacher_scale.svg"

# Suppress warnings from being converted to errors
options(warn = 1) # Set warn to 1 to make warnings not halt execution

# Make dotplot
bwu::dotplot(
  data = df_teacher,
  x = x,
  y = y,
  colors = colors,
  return_plot = return_plot,
  filename = filename,
  na.rm = TRUE
)

# Reset warning options to default if needed
options(warn = 0) # Reset to default behavior
```

### SELF-REPORT

{{< include _02-10_emotion_child_text_self.qmd >}}

```{=typst}
// Define a function to create a domain with a title, a table, and a figure
#let domain(title: none, file_qtbl, file_fig) = {
  let font = (font: "Merriweather", size: 0.7em)
  set text(..font)
  pad(top: 0.5em)[]
  grid(
    columns: (50%, 50%),
    gutter: 8pt,
    figure(
      [#image(file_qtbl)],
      caption: figure.caption(position: top, [#title]),
      kind: "qtbl",
      supplement: [Table],
    ),
    figure(
      [#image(file_fig, width: auto)],
      caption: figure.caption(
        position: bottom,
        [
          Mood/Child Self-Report. Self report of behavioral, emotional, and social difficulties.
          ],
      ),
      placement: none,
      kind: "image",
      supplement: [Figure],
      gap: 0.5em,
    ),
  )
}
```
```{=typst}
// Define the title of the domain
//#let title = "Behavioral/Emotional/Social"

// Define the file name of the table
//#let file_qtbl = "table_emotion_child.png"

// Define the file name of the figure
//#let file_fig = "fig_emotion_child.svg"

// Call the 'domain' function with the specified title, table file name, and figure file name
//#domain(title: [#title], file_qtbl, file_fig)
```
### PARENT RATINGS

{{< include _02-10_emotion_child_text_parent.qmd >}}

```{=typst}
// Define a function to create a domain with a title, a table, and a figure
#let domain(title: none, file_qtbl, file_fig) = {
  let font = (font: "Merriweather", size: 0.7em)
  set text(..font)
  pad(top: 0.5em)[]
  grid(
    columns: (50%, 50%),
    gutter: 8pt,
    figure(
      [#image(file_qtbl)],
      caption: figure.caption(position: top, [#title]),
      kind: "qtbl",
      supplement: [Table],
    ),
    figure(
      [#image(file_fig, width: auto)],
      caption: figure.caption(
        position: bottom,
        [
          Mood/Parent Report. Parent reports of behavioral and emotional problems in children and adolescents.
                  ],
      ),
      placement: none,
      kind: "image",
      supplement: [Figure],
      gap: 0.5em,
    ),
  )
}
```
```{=typst}
// Define the title of the domain
#let title = "Behavioral/Emotional/Social"

// Define the file name of the table
#let file_qtbl = "table_emotion_parent.png"

// Define the file name of the figure
#let file_fig = "fig_emotion_parent.svg"

// Call the 'domain' function with the specified title, table file name, and figure file name
#domain(title: [#title], file_qtbl, file_fig)
```
<!-- scale level -->

```{=typst}
// Define the title of the domain
#let title = "Behavioral/Emotional/Social"

// Define the file name of the table
#let file_qtbl = "table_emotion_parent.png"

// Define the file name of the figure
#let file_fig = "fig_emotion_parent_scale.svg"

// Call the 'domain' function with the specified title, table file name, and figure file name
#domain(title: [#title], file_qtbl, file_fig)
```
### TEACHER RATINGS

{{< include _02-10_emotion_child_text_teacher.qmd >}}

```{=typst}
// Define a function to create a domain with a title, a table, and a figure
#let domain(title: none, file_qtbl, file_fig) = {
  let font = (font: "Merriweather", size: 0.7em)
  set text(..font)
  pad(top: 0.5em)[]
  grid(
    columns: (50%, 50%),
    gutter: 8pt,
    figure(
      [#image(file_qtbl)],
      caption: figure.caption(position: top, [#title]),
      kind: "qtbl",
      supplement: [Table],
    ),
    figure(
      [#image(file_fig, width: auto)],
      caption: figure.caption(
        position: bottom,
        [
          Mood/Teacher Report. Teacher reports of behavioral, emotional, academic, and social difficulties.
                  ],
      ),
      placement: none,
      kind: "image",
      supplement: [Figure],
      gap: 0.5em,
    ),
  )
}
```
```{=typst}
// Define the title of the domain
//#let title = "Behavioral/Emotional/Social"

// Define the file name of the table
// #let file_qtbl = "table_emotion_teacher.png"

// Define the file name of the figure
// #let file_fig = "fig_emotion_teacher.svg"

// Call the 'domain' function with the specified title, table file name, and figure file name
// #domain(title: [#title], file_qtbl, file_fig)
```
